<Activity mc:Ignorable="sap sap2010 sads" x:Class="StWriteDataToExcel" this:StWriteDataToExcel.originPath="./Downloads/Uipath"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:sd="clr-namespace:System.Data;assembly=System.Data"
 xmlns:this="clr-namespace:"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="updatedDataTable" Type="InArgument(sd:DataTable)" />
    <x:Property Name="sheetName" Type="InArgument(x:String)" />
    <x:Property Name="tableRange" Type="InArgument(x:String)" />
    <x:Property Name="statusList" Type="InArgument(scg:List(x:String))" />
    <x:Property Name="originPath" Type="InArgument(x:String)" />
    <x:Property Name="outputPath" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>StWriteDataToExcel_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="StWriteDataToExcel" sap2010:WorkflowViewState.IdRef="Sequence_4">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="path" />
      <Variable x:TypeArguments="x:String" Name="cell" />
      <Variable x:TypeArguments="x:String" Name="statusCell" />
      <Variable x:TypeArguments="x:String" Name="dataCell" />
      <Variable x:TypeArguments="x:Int32" Name="beginRow" />
    </Sequence.Variables>
    <If Condition="[outputPath(outputPath.Length - 1) = &quot;\&quot;]" sap2010:WorkflowViewState.IdRef="If_2">
      <If.Else>
        <Assign sap2010:WorkflowViewState.IdRef="Assign_9">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[outputPath]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[outputPath + "\"]</InArgument>
          </Assign.Value>
        </Assign>
      </If.Else>
    </If>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[path]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[outputPath + "GKS. RESULT.xlsx"]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:CopyFile ContinueOnError="{x:Null}" Destination="[path]" DisplayName="Copy File" sap2010:WorkflowViewState.IdRef="CopyFile_1" Overwrite="True" Path="[originPath]" />
    <ui:ExcelApplicationScope Password="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" WorkbookPath="[path]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="statusRowIndex" />
              <Variable x:TypeArguments="sd:DataTable" Name="headerDataTable" />
            </Sequence.Variables>
            <Assign DisplayName="Assign. To get begin cell range" sap2010:WorkflowViewState.IdRef="Assign_2">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[cell]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[Split(tableRange, ":")(0)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign. To get start row #" sap2010:WorkflowViewState.IdRef="Assign_7">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[beginRow]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[CInt(Right(cell, 1))]</InArgument>
              </Assign.Value>
            </Assign>
            <Sequence DisplayName="Работа с заголовками" sap2010:WorkflowViewState.IdRef="Sequence_8">
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim name(DT.Columns.Count) As String&#xD;&#xA;Dim i As Integer = 0&#xD;&#xA;&#xD;&#xA;headers = New DataTable()&#xD;&#xA;&#xD;&#xA;For Each column As DataColumn In DT.Columns&#xD;&#xA;	headers.Columns.Add(column.ColumnName)&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;Dim row As DataRow&#xD;&#xA;row = headers.NewRow&#xD;&#xA;&#xD;&#xA;For Each column As DataColumn In DT.Columns&#xD;&#xA;  row(i) = column.ColumnName&#xD;&#xA;  i += 1&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;headers.Rows.Add(row)" DisplayName="Invoke Code" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
                <ui:InvokeCode.Arguments>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="DT">[updatedDataTable]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="headers">[headerDataTable]</OutArgument>
                </ui:InvokeCode.Arguments>
              </ui:InvokeCode>
              <Assign DisplayName="Assign. Where to update data" sap2010:WorkflowViewState.IdRef="Assign_10">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[dataCell]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[Left(cell, 1) &amp; (beginRow).ToString]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:ExcelWriteRange AddHeaders="False" DataTable="[headerDataTable]" DisplayName="Write Range" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_2" SheetName="[sheetName]" StartingCell="[dataCell]" />
            </Sequence>
            <Assign DisplayName="Assign. Where to update data" sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[dataCell]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[Left(cell, 1) &amp; (beginRow + 1).ToString]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:ExcelWriteRange AddHeaders="False" DataTable="[updatedDataTable]" DisplayName="Write Range" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="[sheetName]" StartingCell="[dataCell]" />
            <ui:ExcelInsertDeleteColumns DisplayName="Insert Status Column" sap2010:WorkflowViewState.IdRef="ExcelInsertDeleteColumns_1" Mode="Add" NoColumns="1" Position="1" SheetName="[sheetName]" />
            <Assign sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[statusCell]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">["A" &amp; beginRow]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:ExcelWriteCell Cell="[statusCell]" DisplayName="Write Cell" sap2010:WorkflowViewState.IdRef="ExcelWriteCell_2" SheetName="[sheetName]" Text="Статус" />
            <Assign sap2010:WorkflowViewState.IdRef="Assign_4">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[statusRowIndex]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[beginRow + 1]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:ForEach x:TypeArguments="x:Object" CurrentIndex="{x:Null}" DisplayName="For Each" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[statusList]">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="x:Object">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:Object" Name="status" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_5">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:String" Name="statusCell" />
                    </Sequence.Variables>
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_5">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[statusCell]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">["A"+statusRowIndex.ToString]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:ExcelWriteCell Cell="[statusCell]" DisplayName="Write Cell" sap2010:WorkflowViewState.IdRef="ExcelWriteCell_1" SheetName="[sheetName]" Text="[status.ToString]" />
                    <If Condition="[String.Compare(status.ToString, &quot;Данные сопоставлены. Сверка выполнена&quot;) = 0]" sap2010:WorkflowViewState.IdRef="If_1">
                      <If.Then>
                        <ui:ExcelSetRangeColor Color="[System.Drawing.Color.Green]" DisplayName="Set Range Green Color" sap2010:WorkflowViewState.IdRef="ExcelSetRangeColor_1" Range="[statusCell]" SheetName="[sheetName]" />
                      </If.Then>
                      <If.Else>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
                          <If Condition="[String.Compare(status.ToString, &quot;Не достаточно данных для выполнения сверки&quot;) = 0]" sap2010:WorkflowViewState.IdRef="If_3">
                            <If.Then>
                              <ui:ExcelSetRangeColor Color="[System.Drawing.Color.Yellow]" DisplayName="Set Range Yellow Color" sap2010:WorkflowViewState.IdRef="ExcelSetRangeColor_3" Range="[statusCell]" SheetName="[sheetName]" />
                            </If.Then>
                            <If.Else>
                              <ui:ExcelSetRangeColor Color="[System.Drawing.Color.Red]" DisplayName="Set Range Red Color" sap2010:WorkflowViewState.IdRef="ExcelSetRangeColor_2" Range="[statusCell]" SheetName="[sheetName]" />
                            </If.Else>
                          </If>
                        </Sequence>
                      </If.Else>
                    </If>
                    <Assign sap2010:WorkflowViewState.IdRef="Assign_6">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[statusRowIndex]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[statusRowIndex + 1]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
            </ui:ForEach>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
    </ui:ExcelApplicationScope>
    <sads:DebugSymbol.Symbol>dy5FOlxEZXZcUHdDXFB3Qy1HS1NcR0tTXFN0V3JpdGVEYXRhVG9FeGNlbC54YW1sVAFrAX4BAk4D5wEOAgEBVgVhCgIBd2IFaQ4CAXJqBWquAQIBbWsF5QEgAgECVhNWSAIBeFgJXxICAXtnMGdRAgF1ZDFkNwIBc2o5akECAXBqnQFqqwECAW5rtgFrvgECAWtxC+IBFgIBA100XUYCAX5aNVpBAgF8dg19FgIBZ34NhQEWAgFjhgENlgEYAgFSlwENngEWAgFOnwENnwHVAQIBR6ABDaABygECAUKhAQ2oARYCAT2pAQ2pAagBAgE3qgENsQEWAgEysgEN4QEaAgEEezh7UwIBang5eD8CAWiDATeDAU0CAWaAATiAAUICAWSHAQ+MAR8CAV6NAQ+UARgCAVqVAQ+VAdYBAgFTnAE4nAFlAgFRmQE5mQFDAgFPnwHGAZ8B0gECAUyfAT6fAVICAUqfAasBnwG4AQIBSKABrAGgAa8BAgFGoAGfAaABogECAUWgAboBoAHHAQIBQ6YBOKYBTAIBQKMBOaMBRQIBPqkBJakBMwIBO6kBnQGpAaUBAgE6qQGKAakBlwECATivATevAUUCATWsATisAUgCATOyAZgBsgGmAQIBMLgBE94BHgIBBYkBSYkBWwIBYYoBT4oBYAIBX5IBOpIBYwIBXY8BO48BRQIBW5UBxwGVAdMBAgFYlQFAlQFTAgFWlQGsAZUBuQECAVS8ARXDAR4CASvEARXEAbsBAgEkxQEV1QEaAgEL1gEV3QEeAgEGwQFAwQFdAgEuvgFBvgFNAgEsxAEtxAE7AgEpxAGlAcQBuAECASfEAZIBxAGfAQIBJcUBI8UBfQIBDMcBGccB3wECAR7KARnTASQCAQ7bAT/bAVMCAQnYAUDYAVACAQfHATbHAVQCASPHAbYBxwHEAQIBIccBzwHHAdwBAgEfywEb0gEgAgEPywEpywGIAQIBEM0BH80B5wECARjQAR/QAeEBAgESzQE8zQFbAgEdzQG+Ac0BzAECARvNAdcBzQHkAQIBGdABPNABWAIBF9ABuAHQAcYBAgEV0AHRAdAB3gECARM=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="243.2,60" />
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="786.4,209.6" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="786.4,60" />
      <sap2010:ViewStateData Id="CopyFile_1" sap:VirtualizedContainerService.HintSize="786.4,22.4" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="749.6,60" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="749.6,60" />
      <sap2010:ViewStateData Id="InvokeCode_1" sap:VirtualizedContainerService.HintSize="314.4,164.8" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="314.4,60" />
      <sap2010:ViewStateData Id="ExcelWriteRange_2" sap:VirtualizedContainerService.HintSize="314.4,88" />
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="749.6,517.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="749.6,60" />
      <sap2010:ViewStateData Id="ExcelWriteRange_1" sap:VirtualizedContainerService.HintSize="749.6,88" />
      <sap2010:ViewStateData Id="ExcelInsertDeleteColumns_1" sap:VirtualizedContainerService.HintSize="749.6,22.4" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="749.6,60" />
      <sap2010:ViewStateData Id="ExcelWriteCell_2" sap:VirtualizedContainerService.HintSize="749.6,88" />
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="749.6,60" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="711.2,60" />
      <sap2010:ViewStateData Id="ExcelWriteCell_1" sap:VirtualizedContainerService.HintSize="711.2,88" />
      <sap2010:ViewStateData Id="ExcelSetRangeColor_1" sap:VirtualizedContainerService.HintSize="200,22.4" />
      <sap2010:ViewStateData Id="ExcelSetRangeColor_3" sap:VirtualizedContainerService.HintSize="200,22.4" />
      <sap2010:ViewStateData Id="ExcelSetRangeColor_2" sap:VirtualizedContainerService.HintSize="200,22.4" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="464,209.6" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="486.4,334.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="711.2,484" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="711.2,60" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="733.6,936.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="749.6,1071.2" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="772,2572">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExcelApplicationScope_1" sap:VirtualizedContainerService.HintSize="786.4,2681.6" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="808.8,3218.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="StWriteDataToExcel_1" sap:VirtualizedContainerService.HintSize="848.8,3298.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>